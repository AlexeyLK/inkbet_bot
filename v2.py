import openpyxl
import os
import telebot
from telebot import types
import time

bot_token = '6343291110:AAGwqZ6Fg1FGfh32qT3JxgGb3uqvjKPRmS8'  # –í–∫–∞–∂—ñ—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(bot_token)
mark = []
mark.append("some data")

admin_user = '329798696'

users_file = 'users_info.xlsx'
bet_list = 'bet_list.xlsx'
history = 'history.xlsx'
user_data = {}
user_state = {}
# –ü–µ—Ä–≤–∏–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏
primary_menu = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
btn_help = types.KeyboardButton("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
btn_int = types.KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
btn_menu = types.KeyboardButton("–í—ã–∑–æ–≤ –º–µ–Ω—é")
btn_info = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á—ë—Ç–µ")
primary_menu.add(btn_menu, btn_int, btn_help, btn_info)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
markup = types.InlineKeyboardMarkup(row_width=2)
itembtn1 = types.InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data='register')
itembtn2 = types.InlineKeyboardButton('–õ–æ–≥–∏–Ω', callback_data='login')
markup.add(itembtn1, itembtn2)

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
menu_markup = types.InlineKeyboardMarkup(row_width=1)
# m_btn0 = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ä—Ç–µ—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='balance')
m_btn1 = types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫', callback_data='history')
# m_btn2 = types.InlineKeyboardButton('–î–µ–ø–æ–∑–∏—Ç', callback_data='deposit')
m_btn3 = types.InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', callback_data='view_line')
# m_btn4 = types.InlineKeyboardButton('–í—ã–≤–æ–¥', callback_data='out')
m_btn6 = types.InlineKeyboardButton("–ú–æ–π –ë–∞–ª–∞–Ω—Å", callback_data='balance3')

# menu_markup.add(m_btn0, m_btn1, m_btn2, m_btn3, m_btn4, m_btn6)
menu_markup.add(m_btn6, m_btn3, m_btn1)

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
menu_sportlist = types.InlineKeyboardMarkup(row_width=2)
spo_btn1 = types.InlineKeyboardButton('Dota 2', callback_data='dota2')
spo_btn2 = types.InlineKeyboardButton('CS 2', callback_data='cs2')
btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_s")
menu_sportlist.add(spo_btn1, spo_btn2)
menu_sportlist.add(btn_back)

# –ö–Ω–æ–ø–∫–∏ –±–∞–ª–∞–Ω—Å–∞
menu_balance = types.InlineKeyboardMarkup(row_width=2)
b_btn1 = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ä—Ç–µ—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='balance')
b_btn2 = types.InlineKeyboardButton('–î–µ–ø–æ–∑–∏—Ç', callback_data='deposit')
b_btn3 = types.InlineKeyboardButton('–í—ã–≤–æ–¥', callback_data='out')
b_btn4 = types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ', callback_data='hist_out')
btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_s")
menu_balance.add(b_btn1, b_btn2, b_btn3, b_btn4)
menu_balance.add(btn_back)

# –ö–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–∞ –≤–≤–æ–¥–∞
menu_out = types.InlineKeyboardMarkup(row_width=2)
out_btn1 = types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤", callback_data='dep_hist')
out_btn2 = types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤', callback_data='out_hist')
btn_back_to_bal = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_bal")
menu_out.add(out_btn1, out_btn2)
menu_out.add(btn_back_to_bal)

# –ö–Ω–æ–ø–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
menu_deposit = types.InlineKeyboardMarkup(row_width=2)
d_btn1 = types.InlineKeyboardButton('USDT TRC20', callback_data='usdt')
d_btn2 = types.InlineKeyboardButton('–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É', callback_data='carta')
btn_back_dep = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_dep")
menu_deposit.add(d_btn1, d_btn2)
menu_deposit.add(btn_back_dep)

# –ö–Ω–æ–ø–∫–∏ –≤—ã–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É
menu_card = types.InlineKeyboardMarkup(row_width=2)
car_btn1 = types.InlineKeyboardButton('–°–±–µ—Ä–±–∞–Ω–∫', callback_data='sber')
car_btn2 = types.InlineKeyboardButton('–¢–∏–Ω—å–∫–æ—Ñ—Ñ', callback_data='tink')
btn_back_to_card = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_cards")

menu_card.add(car_btn1, car_btn2)
menu_card.add(btn_back_to_card)

tagret_m = types.InlineKeyboardMarkup(row_width=2)
pay_usdt = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª", callback_data='oplata')
btn_back_to_card = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_cards")
tagret_m.add(btn_back_to_card, pay_usdt)
# –ê–¥–º—ñ–Ω –±–∞—Ç–æ–Ω
menu_adm = types.InlineKeyboardMarkup(row_width=2)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def check_users_file():
    if not os.path.exists(users_file):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.append(['user_id', 'balance'])
        wb.save(users_file)
    return
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ñ–∞–π–ª—ñ
def check_user_in_excel(user_id):
    check_users_file()
    wb = openpyxl.load_workbook(users_file)
    ws = wb.active
    for row in ws.iter_rows(values_only=True):
        if row[0] == user_id:
            return True
    return False

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ñ–∞–π–ª—ñ
def register_user_in_excel(user_id):
    check_users_file()
    if not check_user_in_excel(user_id):
        wb = openpyxl.load_workbook(users_file)
        ws = wb.active
        ws.append([user_id, 50000])
        wb.save(users_file)
    return

def view_line():
    wb = openpyxl.load_workbook(bet_list)
    ws = wb.active
    data_line = {}
    for row in ws.iter_rows(values_only=True):
        key = row[4]
        value = [row[0], row[1], row[2], row[3], row[4]]  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞
        data_line[key] = value

    return data_line

def save_data_to_excel(data, user_id, file_path):
    print(data)
    try:
        if not os.path.exists(file_path):
            wb = openpyxl.Workbook()
            ws = wb.active
            ws.append(['User ID', '–°—Ç–∞–≤–∫–∞', '–°—É–º–∞'])
            wb.save(file_path)
        else:
            wb = openpyxl.load_workbook(file_path)
            ws = wb.active
            data_keys = data.keys()
            key1, key2 = list(data_keys)
            print(key1, key2)
            ws.append([user_id, data[key1], data[key2]])
            wb.save(file_path)
    except Exception as e:
        print(str(e))
def update_balance_xlsx(user_id, amount):
    print(user_id)
    wb = openpyxl.load_workbook(users_file)
    ws = wb.active
    row_number = 2  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏

    for row in ws.iter_rows(min_row=2, min_col=1, max_col=2, values_only=True):
        if row[0] == user_id:
            new_balance = float(row[1]) - float(amount)
            print(new_balance)
            if new_balance < 0:
                return False
            cell = ws.cell(row=row_number, column=2)  # –î–æ—Å—Ç—É–ø –∫ —è—á–µ–π–∫–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            cell.value = new_balance  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —è—á–µ–π–∫–µ

        row_number += 1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

    wb.save(users_file)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    wb.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–Ω–∏–≥–∏
    return

def check_balance(user_id):
    wb = openpyxl.load_workbook(users_file)
    ws = wb.active
    for row in ws.iter_rows(min_row=2, min_col=1, max_col=2, values_only=True):
        if row[0] == user_id:
            return row[1] 
    return None
mes_info = ""
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_name = message.from_user.first_name
    user_nickname = message.from_user.username if message.from_user.username else "–ù–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞"
    iser_id = message.from_user.id
    hi_mes = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n"
    hi_mes_ = f"""–ñ–µ–ª–∞–µ—à—å –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏  —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç? \n
–¢–æ–≥–¥–∞ —Ç–µ–±–µ –∫ –Ω–∞–º! –û—Ç–∫—Ä–æ–π –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫  –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üöÄüöÄüöÄ

üìå –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –≤ –º–∏—Ä–µ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∞ –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º\n
üìå –ü–æ–ø–æ–ª–Ω—è–π –±–∞–ª–∞–Ω—Å –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –∏ –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä—É –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏\n
üìå –°—Ç–∞–≤—å –Ω–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–π—Å—è –∏—Å—Ö–æ–¥ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π!\n\n
–£–¥–∞—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫! üí∏üí∏üí∏"""
    
    mes_info = f"""üôãüèª‚Äç‚ôÇÔ∏è –ù–∏–∫: {user_nickname}
üë§ ID: {iser_id}
üé∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    bot.send_message(message.chat.id, hi_mes + hi_mes_, reply_markup=primary_menu)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=markup)
    return




@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.message.chat.id
    if call.data == 'register':
        try:
            register_user_in_excel(user_id)
            if user_id not in user_data:
                user_data[user_id] = {}  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤ user_data
            bot.answer_callback_query(call.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.")
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", reply_markup=menu_markup)
        except:
            bot.send_message(user_id, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    elif call.data == 'login':
        if check_user_in_excel(user_id):
            bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", reply_markup=menu_markup)
        else:
            bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
# –û–±—Ä–æ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç—É
# –í–∏–≤—ñ–¥ —Ç–∞ –ª–æ–≥—ñ–∫–∞ —Å—Ç–∞–≤–æ–∫
    elif call.data == 'balance':
        try:
            balance = check_balance(user_id)
            if balance is not None:
                bot.send_message(user_id, f"üè¶ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} üè¶")
            else:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        except:
            bot.send_message(user_id, "–ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–æ–¥—É –±–∞–ª–∞–Ω—Å—É")
    elif call.data == 'view_line':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", reply_markup=menu_sportlist)
    elif call.data == 'dota2':
        try:
            data = view_line()
            # for key in data.keys():
            #     print(len(data[key][4]))
            #     print(data[key][4][0:4])
            view_markup = types.InlineKeyboardMarkup(row_width=1)
            for key in data.keys():
                if len(data[key]) >= 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                    name1, name2 = data[key][0], data[key][2]
                    if data[key][4]:
                        if key != list(data.keys())[-1] and data[key][4][0:4] == "—è—è—è—è":
                            view_markup.add(types.InlineKeyboardButton(f'{name1}   üÜö   {name2}', callback_data=f"bet_{key}"))
            view_markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_s"))
            
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°—Ç–∞–≤–∫–∏', reply_markup=view_markup)
        except:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –ª–∏–Ω–∏–∏")
            menu_sportlist
    elif call.data == 'cs2':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–°—Ç–∞–≤–∫–∏ –ø–æ –∫—Å2 –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã", reply_markup=menu_markup)
    elif call.data.startswith('bet__'):
        print("")
    elif call.data.startswith('bet_'):
        # try:
        if 1 == 1:
            
            key = call.data[4:]
            mark_ = key[0] + key[4]
            data = view_line()
            menu_b = types.InlineKeyboardMarkup(row_width=2)
            print(1)

            print("here")
            # print(data[mark_][0])
            # print(data[mark_][1])

            # print(data[mark_][2])
            # print(data[mark_][3])

            # print("here------------")
            # print("len" , len(data[key]))
            # print("data[key][4] ", data[key][4])
            for key in data.keys():
                if key:
                    if key[0:2] == mark_ or (key[-1] == mark_[1] and len(key) > 4):
                        print("***********")
                        print(key)
                        print(mark_)
                        print("***********")
                        btn_1 = types.InlineKeyboardButton(f"{data[key][0]} {data[key][1]}", callback_data=f'pay{key}_{data[key][0]}')
                        btn_2 = types.InlineKeyboardButton(f"{data[key][2]} {data[key][3]}", callback_data=f'pay{key}_{data[key][2]}')
                        menu_b.add(btn_1, btn_2)
            
            btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
            menu_b.add(btn_back)


            m_text = "C–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É\n\n üéÆ –í—ã–±—Ä–∞–Ω –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ - Dota 2 \n üèÜ –í—ã–±—Ä–∞–Ω —Ç—É—Ä–Ω–∏—Ä - TI 2023 \n üõ° –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á:"
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=m_text, reply_markup=menu_b)
        # except:
        #     bot.send_message(user_id, '–ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–æ–¥—É bet')
    elif call.data.startswith('pay'):
        try:
            s = call.data[3:].split('_')
            data = view_line()
            key = s[0]
            value = s[1]
            name_index = data[key].index(value)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏–º–µ–Ω–∏ –≤ —Å–ø–∏—Å–∫–µ
            
            select_menu = types.InlineKeyboardMarkup(row_width=2)
            btn_pay = types.InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', callback_data=f"betpay{value} {data[key][name_index + 1]}")
            btn_back = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
            select_menu.add(btn_back, btn_pay)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'{value}-{data[key][name_index + 1]}', reply_markup=select_menu)
        except:
            bot.send_message(user_id, '–ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–æ–¥—É pay')
    elif call.data.startswith('betpay'):
        try:
            s = call.data[6:]
            value = {"–°—Ç–∞–≤–∫–∞": s}
            user_data[user_id] = value

            bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')

            @bot.message_handler(func=lambda message: message.text.startswith(''))
            def handle_betpay_message(message):
                try:
                    user_id = message.from_user.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data[user_id]['updata'] = float(message.text[0:])
                    amount = user_data[user_id]['updata']
                    
                    if update_balance_xlsx(user_id, amount) is False:
                        balance_ = check_balance(user_id)
                        text_= "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –í–∞—à –±–∞–ª–∞–Ω—Å: " + str(balance_)
                        bot.send_message(user_id, text_)

                    else:
                        save_data_to_excel(user_data[user_id], user_id, history)

                        print(">>>>", user_data[user_id]['updata'])

                        bot.send_message(user_id, f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†\n\n –°—Ç–∞–≤–∫–∞: {s[:-1]} \n –ö–µ—Ñ: {s[-1]} \n –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount} \n –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!", reply_markup=menu_markup)
                except:
                    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏")

        except Exception as e:
            bot.send_message(user_id, f'–ü–æ–º–∏–ª–∫–∞: {e}')
    elif call.data == 'deposit':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–∏–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=menu_deposit)
    elif call.data == 'usdt':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: 1232131 \n–í –∑–∞–º–µ—Ç–∫–∞—Ö —É–∫–∞–∂–∏—Ç–µ {user_id} (–ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É @–°–Æ–î–ê), \n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û–ø–ª–∞—Ç–∏–ª –∏ –í–∞—à —Å—á—ë—Ç –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—É—é —Å—É–º–º—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 10-15 –º–∏–Ω—É—Ç', reply_markup=tagret_m)
    elif call.data == 'carta':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã', reply_markup=menu_card)
    elif call.data == 'oplata':
        menu_adm = types.InlineKeyboardMarkup(row_width=2)
        btn_sucsses = types.InlineKeyboardButton("–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞", callback_data=(f's_{user_id}'))
        btn_bad = types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞", callback_data=(f'b_{user_id}'))
        menu_adm.add(btn_bad, btn_sucsses)
        bot.send_message(admin_user, f'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}', reply_markup=menu_adm)
        bot.send_message(user_id, "–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑")
    elif call.data.startswith('s_'):
        s = call.data[2:]
        bot.send_message(s, "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞, —Å–ø–∞—Å–∏–±–æ!")
    elif call.data.startswith('b_'):
        s = call.data[2:]
        bot.send_message(s, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞")
    elif call.data == 'back_dep':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ú–æ–π –±–∞–ª–∞–Ω—Åüí∞üí∞üí∞", reply_markup=menu_balance)
    elif call.data == 'out':
        # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_state[user_id] = "waiting_for_card"
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ USDT(TRC20) Wallet')

        # –î–æ–¥–∞–π—Ç–µ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        @bot.message_handler(func=lambda message: True)
        def handle_message(message):
            user_id = message.chat.id
            if user_id in user_state:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if user_state[user_id] == "waiting_for_card":
                    card = message.text
                    user_state[user_id] = "waiting_for_amount"
                    bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞')
                    user_data[user_id] = {"card": card}
                    return
                elif user_state[user_id] == "waiting_for_amount":
                    amount = message.text
                    user_state[user_id] = "none"
                    menu_out = types.InlineKeyboardMarkup(row_width=2)
                    btn_s = types.InlineKeyboardButton('–í—ã–≤–æ–¥ –ø—Ä–æ—à—ë–ª', callback_data=f'o_{user_id}')
                    btn_b = types.InlineKeyboardButton('–í—ã–≤–æ–¥ –Ω–µ –ø—Ä–æ—à—ë–ª', callback_data=f'ob_{user_id}')
                    menu_out.add(btn_b, btn_s)
                    try:
                        save = update_balance_xlsx(user_id, amount)
                        if save == False:
                            bot.send_message(user_id, "–°—É–º–º–∞ –≤—ã–≤–æ–¥—É –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å")
                        else:
                            bot.send_message(admin_user, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}\–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥—É {user_data[user_id]['card']}\n–°—É–º–º–∞: {amount}", reply_markup=menu_out)
                            bot.send_message(user_id, "–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–∞—à –∑–∞–ø—Ä–æ—Å")
                    except:
                        bot.send_message(user_id, "–ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                    return
            else:
                bot.send_message(user_id, "–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                return
    elif call.data.startswith('o_'):
        s = call.data[2:]
        bot.send_message(s, "–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ")
    elif call.data.startswith('ob_'):
        s = call.data[3:]
        bot.send_message(s, "–í–∏–≤—ñ–¥ –Ω–µ –ø—Ä–æ–π—à–æ–≤")
    elif call.data == 'back':
        data = view_line()
        view_markup = types.InlineKeyboardMarkup(row_width=1)
        for key in data.keys():
                if len(data[key]) >= 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                    name1, name2 = data[key][0], data[key][2]
                    if data[key][4]:
                        if key != list(data.keys())[-1] and data[key][4][0:4] == "—è—è—è—è":
                            view_markup.add(types.InlineKeyboardButton(f'{name1}   üÜö   {name2}', callback_data=f"bet_{key}"))
        view_markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_s"))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°—Ç–∞–≤–∫–∏', reply_markup=view_markup)
    elif call.data == 'back_s':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", reply_markup=menu_markup)
    elif call.data == 'history':
        try:
            wb = openpyxl.load_workbook(history)
            ws = wb.active

            rows = ws.iter_rows(values_only=True)

            data_to_send = ""
            for row in rows:
                if row[0] == user_id:
                    data_to_send += f"|{row[0]}|{row[1]}|{row[2]}|\n"

            bot.send_message(user_id, data_to_send)
        except:
            bot.send_message(user_id, '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π')
    elif call.data == 'balance3':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ú–æ–π –±–∞–ª–∞–Ω—Åüí∞üí∞üí∞", reply_markup=menu_balance)
    elif call.data == 'sber':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏: 2222222222, –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö —É–∫–∞–∂–∏—Ç–µ {user_id}, \n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û–ø–ª–∞—Ç–∏–ª –∏ –í–∞—à —Å—á—ë—Ç –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—É—é —Å—É–º–º—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 1-15 –º–∏–Ω—É—Ç', reply_markup=tagret_m)
    elif call.data == 'tink':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏: 2222222222, –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö —É–∫–∞–∂–∏—Ç–µ {user_id}, \n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û–ø–ª–∞—Ç–∏–ª –∏ –í–∞—à —Å—á—ë—Ç –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—É—é —Å—É–º–º—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 1-15 –º–∏–Ω—É—Ç', reply_markup=tagret_m)
    elif call.data == 'hist_out':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=menu_out)
    elif call.data == 'dep_hist':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ò—Å—Ç–æ—Ä–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=menu_markup)
    elif call.data == 'out_hist':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=menu_markup)
    elif call.data == 'back_to_cards':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã", reply_markup=menu_deposit)
    elif call.data == 'back_to_bal':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ú–æ–π –±–∞–ª–∞–Ω—Åüí∞üí∞üí∞", reply_markup=menu_balance)

# –û–±—Ä–æ–±–∫–∞ –í–∏–∫–ª–∏–∫—É –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == '–í—ã–∑–æ–≤ –º–µ–Ω—é')
def menu(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", reply_markup=menu_markup)

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
@bot.message_handler(func=lambda message: message.text == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
def instruction(message):
    instruction = """
–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞: inkbet bot

–¶–µ–ª—å –±–æ—Ç–∞: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ –∏ –±—ã—Å—Ç—Ä–æ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:

1. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:
   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "Start" –∏–ª–∏ –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /start.

2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–õ–æ–≥–∏–Ω:
   - –ï—Å–ª–∏ –≤—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.
     –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ 50000(–≤ —Å–≤—è–∑–∏ —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º)
   - –ï—Å–ª–∏ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Ä–∞–Ω–Ω–µ–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ª–æ–≥–∏–Ω–∞

3. –ë–∞–ª–∞–Ω—Å:
   - –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞: –ú–æ–π –±–∞–ª–∞–Ω—Å -> –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å

4. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞:
   - –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π —Å—á–µ—Ç –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–µ–ø–æ–∑–∏—Ç–∞
   - –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã

5. –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É:
   - –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
   - –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É—Ä–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É

7. –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫:
   - –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Å—Ç–∞–≤–∫–∏ –≤ –±–∞–∑–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

8. –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:
   - –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–±–µ—Ä–∏—Ç–µ –í—ã–≤–æ–¥ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º

9. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–º–æ—â—å:
   - –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –≤—ã–±–µ—Ä–∏—Ç–µ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
"""
    bot.send_message(message.chat.id, instruction)

# –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫   
@bot.message_handler(func=lambda message: message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
def call_message(message):
    bot.send_message(message.chat.id, "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è @user")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ
@bot.message_handler(func=lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á—ë—Ç–µ')
def menu(message):
    user_name = message.from_user.first_name
    user_nickname = message.from_user.username if message.from_user.username else "–ù–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞"
    iser_id = message.from_user.id

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å User ID –∏ –Ω–∏–∫–Ω–µ–π–º–æ–º
    
    message_text = f"""–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†\n
üôãüèª‚Äç‚ôÇÔ∏è –ù–∏–∫: {user_nickname}
üë§ ID: {iser_id}
üé∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.send_message(message.chat.id, message_text, reply_markup=menu_markup)

import signal

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
def signal_handler(signal, frame):
    print("\n–ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C).")
    exit(0)

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
signal.signal(signal.SIGINT, signal_handler)

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã.")
        time.sleep(3)

